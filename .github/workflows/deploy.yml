name: "üöÄ Deploy Stage 5 to VDS"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VDS_HOST: ${{ secrets.VDS_HOST }}
      VDS_USER: ${{ secrets.VDS_USER }}
      APP_DOMAIN: ${{ secrets.APP_DOMAIN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # –ù–∞—à –∫–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö –≤ BASE64 ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
      - name: Setup SSH key from BASE64 secret
        shell: bash
        env:
          KEY_B64: ${{ secrets.VDS_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$VDS_HOST" >> ~/.ssh/known_hosts

      # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–Ω–µ –Ω—É–∂–µ–Ω git –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
      - name: Rsync project to VDS
        shell: bash
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ ${VDS_USER}@${VDS_HOST}:/root/projects/bezperson/app

      # –ì–æ—Ç–æ–≤–∏–º —Å–µ—Ä–≤–µ—Ä –∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
      - name: Deploy via SSH
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${VDS_USER}@${VDS_HOST} << 'EOF'
            set -e

            # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è Elasticsearch (–¥–µ–ª–∞–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            sysctl -w vm.max_map_count=262144 || true
            if [ -f /etc/sysctl.d/99-elasticsearch.conf ]; then
              true
            else
              echo 'vm.max_map_count=262144' > /etc/sysctl.d/99-elasticsearch.conf || true
              sysctl --system || true
            fi

            cd /root/projects/bezperson/app

            # –û—Å—Ç–∞–Ω–æ–≤–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ
            docker compose down || true

            # –°–æ–±–µ—Ä–µ–º –∏ –∑–∞–ø—É—Å—Ç–∏–º
            docker compose build
            docker compose up -d

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—à nginx-–∫–æ–Ω—Ñ–∏–≥ ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º
            if [ -f nginx/nginx-cite.conf ]; then
              cp -f nginx/nginx-cite.conf /etc/nginx/sites-available/cite.conf || true
              ln -sf /etc/nginx/sites-available/cite.conf /etc/nginx/sites-enabled/cite.conf || true
              nginx -t && systemctl reload nginx || true
            fi

            # SSL (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            if command -v certbot >/dev/null 2>&1; then
              certbot --nginx -d ${APP_DOMAIN} --register-unsafely-without-email --agree-tos || true
            fi

            # Healthcheck –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∂–µ–º –ª–æ–≥–∏, –µ—Å–ª–∏ —É–ø–∞–ª–æ)
            if ! curl -fsS http://127.0.0.1:3000/api/health >/dev/null; then
              echo '--- WEB LOGS ---'
              docker compose logs --no-color web || true
              exit 1
            fi

            echo "OK: app is healthy"
          EOF

      # –í–Ω–µ—à–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω
      - name: Public health check via domain
        shell: bash
        run: |
          curl -I https://${{ env.APP_DOMAIN }}/api/health || exit 1
