name: "🚀 Deploy Stage 5 to VDS"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VDS_HOST: ${{ secrets.VDS_HOST }}
      VDS_USER: ${{ secrets.VDS_USER }}
      APP_DOMAIN: ${{ secrets.APP_DOMAIN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup SSH key from BASE64 secret
        shell: bash
        env:
          KEY_B64: ${{ secrets.VDS_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$VDS_HOST" >> ~/.ssh/known_hosts

      - name: Prepare server (idempotent)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${VDS_USER}@${VDS_HOST} << 'EOF'
            set -e
            export DEBIAN_FRONTEND=noninteractive
            export NEEDRESTART_MODE=a

            # базовые утилиты
            apt-get update || true
            apt-get install -y rsync curl || true

            # docker + compose v2
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              systemctl enable docker || true
              systemctl start docker || true
            else
              systemctl start docker || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              apt-get install -y docker-compose-plugin || true
            fi

            # nginx + certbot (могут уже стоять)
            apt-get install -y nginx certbot python3-certbot-nginx || true

            mkdir -p /root/projects/bezperson/app
            # Для Elasticsearch
            sysctl -w vm.max_map_count=262144 || true
            if [ ! -f /etc/sysctl.d/99-elasticsearch.conf ]; then
              echo 'vm.max_map_count=262144' > /etc/sysctl.d/99-elasticsearch.conf || true
              sysctl --system || true
            fi
          EOF

      - name: Rsync project to VDS
        shell: bash
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ ${VDS_USER}@${VDS_HOST}:/root/projects/bezperson/app

      - name: Deploy via SSH (use docker/docker-compose.yml)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${VDS_USER}@${VDS_HOST} << 'EOF'
            set -e
            cd /root/projects/bezperson/app

            # пути к compose-файлам
            COMPOSE_MAIN="-f docker/docker-compose.yml"

            # остановка/сборка/запуск
            docker compose $COMPOSE_MAIN down || true
            docker compose $COMPOSE_MAIN build
            docker compose $COMPOSE_MAIN up -d

            # если есть конфиг nginx в репо — применяем
            if [ -f nginx/nginx-cite.conf ]; then
              cp -f nginx/nginx-cite.conf /etc/nginx/sites-available/cite.conf || true
              ln -sf /etc/nginx/sites-available/cite.conf /etc/nginx/sites-enabled/cite.conf || true
              nginx -t && systemctl reload nginx || true
            fi

            # SSL (не падаем, если DNS ещё не указывает на сервер)
            if command -v certbot >/dev/null 2>&1; then
              certbot --nginx -d ${APP_DOMAIN} --register-unsafely-without-email --agree-tos || true
            fi

            # Локальный healthcheck
            if ! curl -fsS http://127.0.0.1:3000/api/health >/dev/null; then
              echo '--- WEB LOGS ---'
              docker compose $COMPOSE_MAIN logs --no-color web || true
              exit 1
            fi
            echo "OK: local app health is fine"
          EOF

      - name: Public health check via domain
        shell: bash
        run: |
          curl -I https://${{ env.APP_DOMAIN }}/api/health || exit 1
