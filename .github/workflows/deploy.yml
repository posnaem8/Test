name: "üöÄ Deploy Stage 5 to VDS"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VDS_HOST: ${{ secrets.VDS_HOST }}
      VDS_USER: ${{ secrets.VDS_USER }}
      APP_DOMAIN: ${{ secrets.APP_DOMAIN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # –ö–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–µ –≤ BASE64. –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º known_hosts.
      - name: Setup SSH key from BASE64 secret
        shell: bash
        env:
          KEY_B64: ${{ secrets.VDS_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$VDS_HOST" >> ~/.ssh/known_hosts

      # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á–µ–≥–æ –ù–ï–¢. –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç APT exit code 100.
      - name: Prepare server (idempotent)
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${VDS_USER}@${VDS_HOST} << 'EOF'
            set -e

            export DEBIAN_FRONTEND=noninteractive
            export NEEDRESTART_MODE=a

            # rsync
            if ! command -v rsync >/dev/null 2>&1; then
              apt-get update || true
              apt-get install -y rsync || true
            fi

            # docker
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              systemctl enable docker || true
              systemctl start docker || true
            else
              systemctl start docker || true
            fi

            # docker compose v2 (–ø–ª–∞–≥–∏–Ω) ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –Ω–µ –≤–∞–ª–∏–º—Å—è, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
            if ! docker compose version >/dev/null 2>&1; then
              apt-get update || true
              apt-get install -y docker-compose-plugin || true
            fi

            # nginx
            if ! command -v nginx >/dev/null 2>&1; then
              apt-get update || true
              apt-get install -y nginx || true
            fi

            # certbot (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            if ! command -v certbot >/dev/null 2>&1; then
              apt-get update || true
              apt-get install -y certbot python3-certbot-nginx || true
            fi

            # –∫–∞—Ç–∞–ª–æ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞
            mkdir -p /root/projects/bezperson/app

            # –¥–ª—è Elasticsearch
            sysctl -w vm.max_map_count=262144 || true
            if [ ! -f /etc/sysctl.d/99-elasticsearch.conf ]; then
              echo 'vm.max_map_count=262144' > /etc/sysctl.d/99-elasticsearch.conf || true
              sysctl --system || true
            fi
          EOF

      # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ .git –∏ node_modules)
      - name: Rsync project to VDS
        shell: bash
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            --exclude ".git" \
            --exclude "node_modules" \
            ./ ${VDS_USER}@${VDS_HOST}:/root/projects/bezperson/app

      # –î–µ–ø–ª–æ–π: docker compose build/up, nginx-–∫–æ–Ω—Ñ–∏–≥ –∏ SSL, healthchecks
      - name: Deploy via SSH
        shell: bash
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${VDS_USER}@${VDS_HOST} << 'EOF'
            set -e
            cd /root/projects/bezperson/app

            docker compose down || true
            docker compose build
            docker compose up -d

            # –ø—Ä–∏–º–µ–Ω—è–µ–º nginx-–∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ä–µ–ø–æ
            if [ -f nginx/nginx-cite.conf ]; then
              cp -f nginx/nginx-cite.conf /etc/nginx/sites-available/cite.conf || true
              ln -sf /etc/nginx/sites-available/cite.conf /etc/nginx/sites-enabled/cite.conf || true
              nginx -t && systemctl reload nginx || true
            fi

            # SSL (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ; –Ω–µ –≤–∞–ª–∏–º—Å—è, –µ—Å–ª–∏ –¥–æ–º–µ–Ω –µ—â—ë –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
            if command -v certbot >/dev/null 2>&1; then
              certbot --nginx -d ${APP_DOMAIN} --register-unsafely-without-email --agree-tos || true
            fi

            # –õ–æ–∫–∞–ª—å–Ω—ã–π healthcheck –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if ! curl -fsS http://127.0.0.1:3000/api/health >/dev/null; then
              echo '--- WEB LOGS ---'
              docker compose logs --no-color web || true
              exit 1
            fi
            echo "OK: local app health is fine"
          EOF

      # –ü—É–±–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É (—á–µ—Ä–µ–∑ Nginx/SSL)
      - name: Public health check via domain
        shell: bash
        run: |
          curl -I https://${{ env.APP_DOMAIN }}/api/health || exit 1
